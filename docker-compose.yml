services:
  app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: node_app
    ports:
      - ${PORT}:${PORT}
      - ${DEBUG_PORT}:${DEBUG_PORT}
    # env_file: ./.env  # Uncomment if .env file exists
    environment:
      - DATABASE_URL=${DATABASE_URL}
      - REDIS_URL=${REDIS_URL}
      - NODE_ENV=${NODE_ENV}
      - DATABASE_HOST=${DATABASE_HOST}
      - DATABASE_PORT=${DATABASE_PORT}
      - DATABASE_USER=${DATABASE_USER}
      - DATABASE_PASSWORD=${DATABASE_PASSWORD}
      - DATABASE_NAME=${DATABASE_NAME}
      - REDIS_HOST=${REDIS_HOST}
      - SESSION_SECRET=supersecretkey
      - JWT_SECRET=anothersecret
    depends_on:
      - ${DATABASE_HOST}
      - ${REDIS_HOST}
    volumes:
      - ./:/app
      - /app/node_modules  # ensures container uses its own node_modules
    command: npm run dev
    networks:
      - appnet
    # No external dependencies (e.g., database), but add here if needed

  postgres:
    container_name: postgres
    image: postgres:15
    ports:
      - ${DATABASE_PORT}:${DATABASE_PORT}
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    volumes:
      - postgres_data:/var/lib/postgresql/
      - ./postgres-init-scripts:/docker-entrypoint-initdb.d
    networks:
      - appnet
      
  redis:
    image: redis:7
    container_name: redis
    ports:
        - ${REDIS_PORT}:${REDIS_PORT}
    networks:
      - appnet

volumes:
  postgres_data:

networks:
  appnet:
    driver: bridge